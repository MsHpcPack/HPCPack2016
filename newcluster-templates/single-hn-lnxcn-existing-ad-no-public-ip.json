{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "The name of the HPC cluster. It must be unique in the domain forest; It must contain between 3 and 15 characters with lowercase letters and numbers, and must start with a letter."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The existing virtual network in which all VMs of the HPC cluster will be created."
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group in which the existing virtual network was created."
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "The existing subnet in which all VMs of the HPC cluster will be created."
      }
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "The fully qualified domain name (FQDN) for the existing domain forest in which the HPC cluster will join, for example 'hpc.local'."
      }
    },
    "headNodeOS": {
      "type": "string",
      "defaultValue": "WindowsServer2012R2",
      "allowedValues": [
        "WindowsServer2012R2",
        "WindowsServer2016"
      ],
      "metadata": {
        "description": "The operating system of the head node."
      }
    },
    "headNodeDiskType": {
      "type": "string",
      "defaultValue": "SSD",
      "allowedValues": [
        "HDD",
        "SSD"
      ],
      "metadata": {
        "description": "The disk type of head node VM. Note that SSD only supports DS-series, DSv2-series, GS-series, and Fs-series VMs."
      }
    },
    "headNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS4_v2",
      "metadata": {
        "description": "The VM size for the head node, all available VM sizes in Azure can be found at https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes."
      }
    },
    "computeNodeImage": {
      "type": "string",
      "defaultValue": "CentOS_7.3",
      "allowedValues": [
        "CentOS_6.5",
        "CentOS_6.6",
        "CentOS_6.7",
        "CentOS_6.8",
        "CentOS_7.0",
        "CentOS_7.1",
        "CentOS_7.2",
        "CentOS_7.3",
        "CentOS_6.5_HPC",
        "CentOS_6.8_HPC",
        "CentOS_7.1_HPC",
        "CentOS_7.3_HPC",
        "RHEL_6.7",
        "RHEL_6.8",
        "RHEL_7.2",
        "RHEL_7.3",
        "SLES_12_SP3",
        "SLES_12_SP3_HPC",
        "SLES_12_SP3_HPC_Premium",
        "SLES_12_SP3_Premium",
        "Ubuntu_14.04",
        "Ubuntu_16.04"
      ],
      "metadata": {
        "description": "The Linux VM image of the compute nodes"
      }
    },
    "computeNodeNamePrefix": {
      "type": "string",
      "defaultValue": "IaaSLnxCN",
      "minLength": 1,
      "maxLength": 12,
      "metadata": {
        "description": "The name prefix of the compute nodes. It must be no more than 12 characters, begin with a letter, and contain only letters, numbers and hyphens. For example, if 'IaaSCN' is specified, the compute node names will be 'IaaSCN000', 'IaaSCN001', ..."
      }
    },
    "computeNodeNumber": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "The number of the compute nodes."
      }
    },
    "computeNodeDiskType": {
      "type": "string",
      "defaultValue": "HDD",
      "allowedValues": [
        "HDD",
        "SSD"
      ],
      "metadata": {
        "description": "The disk type of the compute node VMs. Note that SSD only supports DS-series, DSv2-series, GS-series, and Fs-series VMs."
      }
    },
    "computeNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "The VM size for the compute nodes, all available VM sizes in Azure can be found at https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes."
      }
    },
    "computeNodeInAVSet": {
      "type": "string",
      "defaultValue": "Auto",
      "allowedValues": [
        "Yes",
        "No",
        "Auto"
      ],
      "metadata": {
        "description": "Specify whether you want to create the compute nodes in Azure availability set, if 'Auto' is specified, compute nodes are created in availability set only when the VM size is RDMA capable."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "hpcadmin",
      "metadata": {
        "description": "Administrator user name for the virtual machines and the Active Directory domain."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password for the virtual machines and the Active Directory domain"
      }
    },
    "hpcPackVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The version for HPC Pack 2016. It is strongly recommended to specify as 'latest'. The deployment will fail if an incorrect version is specified."
      }
    },
    "vaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the KeyVault in which the certificate is stored."
      }
    },
    "vaultResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the KeyVault in which the certificate is stored."
      }
    },
    "certificateUrl": {
      "type": "string",
      "metadata": {
        "description": "Url of the certificate with version in KeyVault e.g. https://testault.vault.azure.net/secrets/testcert/b621es1db241e56a72d037479xab1r7."
      }
    },
    "certThumbprint": {
      "type": "string",
      "metadata": {
        "description": "Thumbprint of the certificate."
      }
    }
  },
  "variables": {
    "storageAccountTypes": {
      "HDD": "Standard_LRS",
      "SSD": "Premium_LRS"
    },
    "apiVersion": "2015-06-15",
    "storageAccountName": "[concat('hpc', uniqueString(resourceGroup().id, parameters('clusterName')))]",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('subnetName'))]",
    "availabilitySetNameHN": "[concat(parameters('clusterName'), '-avset')]",
    "cnAvailabilitySetNamePrefix": "[concat(parameters('computeNodeNamePrefix'), 'avset')]",
    "nbrVMPerAvailabilitySet": 80,
    "cnAvailabilitySetNumber": "[add(div(parameters('computeNodeNumber'), variables('nbrVMPerAvailabilitySet')), 1)]",
    "uniqueSuffix": "[uniqueString(variables('subnetRef'))]",
    "uniqueNicSuffix": "[concat('-nic-', variables('uniqueSuffix'))]",
    "nicNameHN": "[concat(parameters('clusterName'), variables('uniqueNicSuffix'))]",
    "rdmaVMSizes": [
      "Standard_A8",
      "Standard_A9",
      "Standard_H16r",
      "Standard_H16mr",
      "Standard_NC24r",
      "Standard_NC24rs_v2",
      "Standard_ND24rs"
    ],
    "cnRDMACapable": "[contains(variables('rdmaVMSizes'), parameters('computeNodeVMSize'))]",
    "hnRDMACapable": "[contains(variables('rdmaVMSizes'), parameters('headNodeVMSize'))]",
    "createCNInAVSet": "[or(equals(parameters('computeNodeInAVSet'), 'Yes'), and(equals(parameters('computeNodeInAVSet'), 'Auto'), variables('cnRDMACapable')))]",
    "winCertSecrets": [
      {
        "sourceVault": {
          "id": "[resourceId(parameters('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
        },
        "vaultCertificates": [
          {
            "certificateUrl": "[parameters('certificateUrl')]",
            "certificateStore": "My"
          }
        ]
      }
    ],
    "lnxCertSecrets": [
      {
        "sourceVault": {
          "id": "[resourceId(parameters('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
        },
        "vaultCertificates": [
          {
            "certificateUrl": "[parameters('certificateUrl')]"
          }
        ]
      }
    ],
    "headNodeImages": {
      "WindowsServer2012R2": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U1HN-WS2012R2",
        "version": "[parameters('hpcPackVersion')]"
      },
      "WindowsServer2016": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016U1HN-WS2016",
        "version": "[parameters('hpcPackVersion')]"
      }
    },
    "computeNodeImages": {
      "CentOS_6.5": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.5",
        "version": "latest"
      },
      "CentOS_6.6": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.6",
        "version": "latest"
      },
      "CentOS_6.7": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.7",
        "version": "latest"
      },
      "CentOS_6.8": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.8",
        "version": "latest"
      },
      "CentOS_7.0": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.0",
        "version": "latest"
      },
      "CentOS_7.1": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.1",
        "version": "latest"
      },
      "CentOS_7.2": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.2",
        "version": "latest"
      },
      "CentOS_7.3": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.3",
        "version": "latest"
      },
      "CentOS_6.5_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "6.5",
        "version": "latest"
      },
      "CentOS_6.8_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "6.8",
        "version": "latest"
      },
      "CentOS_7.1_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "7.1",
        "version": "latest"
      },
      "CentOS_7.3_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "7.3",
        "version": "latest"
      },
      "RHEL_6.7": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "6.7",
        "version": "latest"
      },
      "RHEL_6.8": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "6.8",
        "version": "latest"
      },
      "RHEL_7.2": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.2",
        "version": "latest"
      },
      "RHEL_7.3": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.3",
        "version": "latest"
      },
      "SLES_12_SP3": {
        "publisher": "SUSE",
        "offer": "SLES",
        "sku": "12-SP3",
        "version": "latest"
      },
      "SLES_12_SP3_HPC": {
        "publisher": "SUSE",
        "offer": "SLES-HPC",
        "sku": "12-SP3",
        "version": "latest"
      },
      "SLES_12_SP3_HPC_Premium": {
        "publisher": "SUSE",
        "offer": "SLES-HPC-Priority",
        "sku": "12-SP3",
        "version": "latest"
      },
      "SLES_12_SP3_Premium": {
        "publisher": "SUSE",
        "offer": "SLES-Priority",
        "sku": "12-SP3",
        "version": "latest"
      },
      "Ubuntu_14.04": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "14.04.3-LTS",
        "version": "latest"
      },
      "Ubuntu_16.04": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "16.04.0-LTS",
        "version": "latest"
      }
    },
    "headNodeImageRef": "[variables('headNodeImages')[parameters('headNodeOS')]]",
    "selectedLinuxImageRef": "[variables('computeNodeImages')[parameters('computeNodeImage')]]",
    "sharedResxBaseUrl": "https://raw.githubusercontent.com/MsHpcPack/HPCPack2016/master/newcluster-templates/shared-resources"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },

    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicNameHN')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "IPConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('clusterName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameHN'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('headNodeVMSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('clusterName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": false
          },
          "secrets": "[variables('winCertSecrets')]"
        },
        "storageProfile": {
          "imageReference": "[variables('headNodeImageRef')]",
          "osDisk": {
            "name": "[concat(parameters('clusterName'), '-osdisk')]",
            "caching": "ReadOnly",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('storageAccountTypes')[parameters('headNodeDiskType')]]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('clusterName'), variables('uniqueNicSuffix')))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "[concat('joinDomain', parameters('clusterName'))]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('clusterName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('sharedResxBaseUrl'),'/dsc-extension.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[variables('apiVersion')]"
          },
          "vmName": {
            "value": "[parameters('clusterName')]"
          },
          "dscExtensionName": {
            "value": "setupHpcHeadNode"
          },
          "dscSettings": {
            "value": {
              "configuration": {
                "url": "[concat(variables('sharedResxBaseUrl'),'/JoinADDomain.ps1.zip')]",
                "script": "JoinADDomain.ps1",
                "function": "JoinADDomain"
              },
              "configurationArguments": {
                "DomainName": "[parameters('domainName')]"
              }
            }
          },
          "dscProtectedSettings": {
            "value": {
              "configurationArguments": {
                "AdminCreds": {
                  "UserName": "[parameters('adminUsername')]",
                  "Password": "[parameters('adminPassword')]"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('clusterName'),'/setupHpcHeadNode')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/joinDomain', parameters('clusterName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.20",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "configuration": {
            "url": "[concat(variables('sharedResxBaseUrl'),'/InstallHpcSingleHeadNode.ps1.zip')]",
            "script": "InstallHpcSingleHeadNode.ps1",
            "function": "InstallHpcSingleHeadNode"
          },
          "configurationArguments": {
            "SSLThumbprint": "[parameters('certThumbprint')]",
            "LinuxCommOverHttp": true,
            "CNSize": "[parameters('computeNodeVMSize')]",
            "SubscriptionId": "[subscription().subscriptionId]",
            "VNet": "[parameters('virtualNetworkName')]",
            "Subnet": "[parameters('subnetName')]",
            "Location": "[resourceGroup().location]",
            "ResourceGroup": "[parameters('virtualNetworkResourceGroupName')]",
            "VaultResourceGroup": "[parameters('VaultResourceGroup')]",
            "CertificateUrl": "[parameters('CertificateUrl')]",
            "CNNamePrefix": "[parameters('computeNodeNamePrefix')]"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "SetupUserCredential": {
              "UserName": "[concat(parameters('domainName'), '\\', parameters('adminUsername'))]",
              "Password": "[parameters('adminPassword')]"
            },
            "AzureStorageConnString": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'),variables('apiVersion')).key1)]"
          }
        }
      }
    },
    {
      "condition": "[variables('createCNInAVSet')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[concat(variables('cnAvailabilitySetNamePrefix'), padLeft(string(copyIndex()), 2, '0'))]",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2
      },
      "copy": {
        "name": "cnAvailabilitySetCopy",
        "count": "[variables('cnAvailabilitySetNumber')]"
      }
    },
    {
      "apiVersion": "2015-01-01",
      "type": "Microsoft.Resources/deployments",
      "name": "[concat('create', parameters('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]",
      "dependsOn": [
        "cnAvailabilitySetCopy"
      ],
      "copy": {
        "name": "CN",
        "count": "[parameters('computeNodeNumber')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('sharedResxBaseUrl'),'/linux-node.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[variables('apiVersion')]"
          },
          "subnetId": {
            "value": "[variables('subnetRef')]"
          },
          "vmName": {
            "value": "[concat(parameters('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "storageAccountType": {
            "value": "[variables('storageAccountTypes')[parameters('computeNodeDiskType')]]"
          },
          "imageReference": {
            "value": "[variables('selectedLinuxImageRef')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "availabilitySetName": {
            "value": "[if(variables('createCNInAVSet'), concat(variables('cnAvailabilitySetNamePrefix'), padLeft(string(div(copyIndex(), variables('nbrVMPerAvailabilitySet'))), 2, '0')), '')]"
          },
          "secrets": {
            "value": "[variables('lnxCertSecrets')]"
          },
          "headNodeList": {
            "value": "[concat(parameters('clusterName'), '.', parameters('domainName'))]"
          }
        }
      }
    }
  ],
  "outputs": {
  }
}